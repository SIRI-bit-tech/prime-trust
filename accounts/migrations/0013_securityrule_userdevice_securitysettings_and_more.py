# Generated by Django 4.2.7 on 2025-07-06 18:46

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import encrypted_model_fields.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('accounts', '0012_remove_userprofile_gender'),
    ]

    operations = [
        migrations.CreateModel(
            name='SecurityRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('rule_type', models.CharField(choices=[('transaction_amount', 'Transaction Amount Limit'), ('transaction_frequency', 'Transaction Frequency'), ('login_frequency', 'Login Frequency'), ('geographic_restriction', 'Geographic Restriction'), ('device_restriction', 'Device Restriction'), ('time_restriction', 'Time-based Restriction'), ('velocity_check', 'Velocity Check')], max_length=30)),
                ('description', models.TextField()),
                ('conditions', models.JSONField(default=dict)),
                ('actions', models.JSONField(default=dict)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('device_name', models.CharField(max_length=200)),
                ('device_type', models.CharField(choices=[('web', 'Web Browser'), ('mobile', 'Mobile App'), ('tablet', 'Tablet'), ('desktop', 'Desktop Application'), ('api', 'API Client')], max_length=20)),
                ('user_agent', models.TextField()),
                ('ip_address', models.GenericIPAddressField()),
                ('browser_fingerprint', models.CharField(blank=True, max_length=64)),
                ('screen_resolution', models.CharField(blank=True, max_length=20)),
                ('timezone_offset', models.CharField(blank=True, max_length=10)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('trust_level', models.CharField(choices=[('trusted', 'Trusted'), ('recognized', 'Recognized'), ('new', 'New Device'), ('suspicious', 'Suspicious'), ('blocked', 'Blocked')], default='new', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('last_used', models.DateTimeField(auto_now=True)),
                ('first_seen', models.DateTimeField(auto_now_add=True)),
                ('requires_2fa', models.BooleanField(default=True)),
                ('trusted_until', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='devices', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-last_used'],
            },
        ),
        migrations.CreateModel(
            name='SecuritySettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('two_factor_enabled', models.BooleanField(default=False)),
                ('two_factor_secret', encrypted_model_fields.fields.EncryptedTextField(blank=True, null=True)),
                ('two_factor_backup_tokens', encrypted_model_fields.fields.EncryptedTextField(blank=True, null=True)),
                ('two_factor_enabled_at', models.DateTimeField(blank=True, null=True)),
                ('login_notifications_enabled', models.BooleanField(default=True)),
                ('transaction_notifications_enabled', models.BooleanField(default=True)),
                ('security_alerts_enabled', models.BooleanField(default=True)),
                ('password_last_changed', models.DateTimeField(auto_now_add=True)),
                ('password_change_required', models.BooleanField(default=False)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('security_score', models.PositiveIntegerField(default=0)),
                ('security_score_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='security_settings', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SecurityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('login_success', 'Login Success'), ('login_failed', 'Login Failed'), ('login_blocked', 'Login Blocked'), ('logout', 'Logout'), ('password_changed', 'Password Changed'), ('2fa_enabled', '2FA Enabled'), ('2fa_disabled', '2FA Disabled'), ('2fa_failed', '2FA Verification Failed'), ('device_added', 'New Device Added'), ('device_trusted', 'Device Trusted'), ('device_blocked', 'Device Blocked'), ('suspicious_activity', 'Suspicious Activity'), ('account_locked', 'Account Locked'), ('account_unlocked', 'Account Unlocked'), ('transaction_pin_changed', 'Transaction PIN Changed'), ('profile_updated', 'Profile Updated'), ('api_access', 'API Access'), ('high_value_transaction', 'High Value Transaction'), ('failed_transaction', 'Failed Transaction'), ('multiple_failed_attempts', 'Multiple Failed Attempts'), ('geographic_anomaly', 'Geographic Anomaly'), ('session_expired', 'Session Expired'), ('backup_code_used', 'Backup Code Used')], max_length=30)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=20)),
                ('description', models.TextField()),
                ('additional_data', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField(blank=True)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('action_taken', models.CharField(blank=True, max_length=200)),
                ('resolved', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.userdevice')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='security_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RiskScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_risk_score', models.PositiveIntegerField(default=0)),
                ('device_risk_score', models.PositiveIntegerField(default=0)),
                ('behavioral_risk_score', models.PositiveIntegerField(default=0)),
                ('geographic_risk_score', models.PositiveIntegerField(default=0)),
                ('transaction_risk_score', models.PositiveIntegerField(default=0)),
                ('risk_factors', models.JSONField(default=list)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('calculation_count', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='risk_scores', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LoginAttempt',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed_password', 'Failed Password'), ('failed_2fa', 'Failed 2FA'), ('account_locked', 'Account Locked'), ('blocked_ip', 'Blocked IP'), ('device_blocked', 'Device Blocked')], max_length=20)),
                ('ip_address', models.GenericIPAddressField()),
                ('user_agent', models.TextField()),
                ('device_fingerprint', models.CharField(blank=True, max_length=64)),
                ('country', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('failure_reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.userdevice')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='login_attempts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BackupCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code_hash', models.CharField(max_length=128)),
                ('is_used', models.BooleanField(default=False)),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('used_from_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='backup_codes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='userdevice',
            index=models.Index(fields=['user', 'is_active'], name='accounts_us_user_id_054818_idx'),
        ),
        migrations.AddIndex(
            model_name='userdevice',
            index=models.Index(fields=['device_id'], name='accounts_us_device__9d02e7_idx'),
        ),
        migrations.AddIndex(
            model_name='userdevice',
            index=models.Index(fields=['ip_address'], name='accounts_us_ip_addr_9e584c_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['user', 'event_type'], name='accounts_se_user_id_90ac5d_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['risk_level', 'resolved'], name='accounts_se_risk_le_6876f5_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['created_at'], name='accounts_se_created_746286_idx'),
        ),
        migrations.AddIndex(
            model_name='securityevent',
            index=models.Index(fields=['ip_address'], name='accounts_se_ip_addr_d0fe6a_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['email', 'status'], name='accounts_lo_email_5d3fbb_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['ip_address', 'created_at'], name='accounts_lo_ip_addr_71e387_idx'),
        ),
        migrations.AddIndex(
            model_name='loginattempt',
            index=models.Index(fields=['user', 'status'], name='accounts_lo_user_id_a3d109_idx'),
        ),
        migrations.AddIndex(
            model_name='backupcode',
            index=models.Index(fields=['user', 'is_used'], name='accounts_ba_user_id_5be7f7_idx'),
        ),
    ]
