# Generated by Django 4.2.7 on 2025-07-08 04:14

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('alert_type', models.CharField(choices=[('response_time', 'Response Time Threshold'), ('error_rate', 'Error Rate Threshold'), ('system_resource', 'System Resource Threshold'), ('webhook_failure', 'Webhook Failure Rate'), ('database_connection', 'Database Connection Issues')], max_length=50)),
                ('threshold_value', models.FloatField()),
                ('severity', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('critical', 'Critical')], max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('email_notifications', models.BooleanField(default=False)),
                ('webhook_notifications', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'api_alert_rules',
            },
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Descriptive name for this webhook', max_length=255)),
                ('url', models.URLField(help_text='The URL to POST webhook data to', validators=[django.core.validators.URLValidator()])),
                ('events', models.JSONField(default=list, help_text='List of events this webhook should receive')),
                ('secret', models.CharField(blank=True, help_text='Secret for webhook signature verification', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('timeout_seconds', models.PositiveIntegerField(default=30, help_text='Timeout for webhook requests')),
                ('max_retries', models.PositiveIntegerField(default=3, help_text='Maximum number of retry attempts')),
                ('retry_delay_seconds', models.PositiveIntegerField(default=60, help_text='Initial delay between retries')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_used_at', models.DateTimeField(blank=True, null=True)),
                ('total_deliveries', models.PositiveIntegerField(default=0)),
                ('successful_deliveries', models.PositiveIntegerField(default=0)),
                ('failed_deliveries', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_endpoints', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_webhook_endpoints',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('user.created', 'User Created'), ('user.updated', 'User Updated'), ('user.deleted', 'User Deleted'), ('user.login', 'User Login'), ('user.logout', 'User Logout'), ('account.created', 'Account Created'), ('account.updated', 'Account Updated'), ('account.frozen', 'Account Frozen'), ('account.unfrozen', 'Account Unfrozen'), ('account.closed', 'Account Closed'), ('transaction.created', 'Transaction Created'), ('transaction.completed', 'Transaction Completed'), ('transaction.failed', 'Transaction Failed'), ('transaction.pending', 'Transaction Pending'), ('transaction.cancelled', 'Transaction Cancelled'), ('transfer.initiated', 'Transfer Initiated'), ('transfer.completed', 'Transfer Completed'), ('transfer.failed', 'Transfer Failed'), ('payment.created', 'Payment Created'), ('payment.completed', 'Payment Completed'), ('payment.failed', 'Payment Failed'), ('investment.created', 'Investment Created'), ('investment.updated', 'Investment Updated'), ('investment.sold', 'Investment Sold'), ('loan.applied', 'Loan Application Submitted'), ('loan.approved', 'Loan Approved'), ('loan.rejected', 'Loan Rejected'), ('loan.disbursed', 'Loan Disbursed'), ('insurance.purchased', 'Insurance Policy Purchased'), ('insurance.claim_filed', 'Insurance Claim Filed'), ('insurance.claim_approved', 'Insurance Claim Approved'), ('security.suspicious_login', 'Suspicious Login Detected'), ('security.account_locked', 'Account Locked'), ('security.password_changed', 'Password Changed'), ('security.2fa_enabled', '2FA Enabled'), ('security.device_registered', 'New Device Registered'), ('system.maintenance', 'System Maintenance'), ('system.outage', 'System Outage'), ('system.update', 'System Update')], max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('payload', models.JSONField(help_text='The actual event data to be sent')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('delivery_attempts', models.PositiveIntegerField(default=0)),
                ('next_retry_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_webhook_events',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='WebhookTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('user.created', 'User Created'), ('user.updated', 'User Updated'), ('user.deleted', 'User Deleted'), ('user.login', 'User Login'), ('user.logout', 'User Logout'), ('account.created', 'Account Created'), ('account.updated', 'Account Updated'), ('account.frozen', 'Account Frozen'), ('account.unfrozen', 'Account Unfrozen'), ('account.closed', 'Account Closed'), ('transaction.created', 'Transaction Created'), ('transaction.completed', 'Transaction Completed'), ('transaction.failed', 'Transaction Failed'), ('transaction.pending', 'Transaction Pending'), ('transaction.cancelled', 'Transaction Cancelled'), ('transfer.initiated', 'Transfer Initiated'), ('transfer.completed', 'Transfer Completed'), ('transfer.failed', 'Transfer Failed'), ('payment.created', 'Payment Created'), ('payment.completed', 'Payment Completed'), ('payment.failed', 'Payment Failed'), ('investment.created', 'Investment Created'), ('investment.updated', 'Investment Updated'), ('investment.sold', 'Investment Sold'), ('loan.applied', 'Loan Application Submitted'), ('loan.approved', 'Loan Approved'), ('loan.rejected', 'Loan Rejected'), ('loan.disbursed', 'Loan Disbursed'), ('insurance.purchased', 'Insurance Policy Purchased'), ('insurance.claim_filed', 'Insurance Claim Filed'), ('insurance.claim_approved', 'Insurance Claim Approved'), ('security.suspicious_login', 'Suspicious Login Detected'), ('security.account_locked', 'Account Locked'), ('security.password_changed', 'Password Changed'), ('security.2fa_enabled', '2FA Enabled'), ('security.device_registered', 'New Device Registered'), ('system.maintenance', 'System Maintenance'), ('system.outage', 'System Outage'), ('system.update', 'System Update')], max_length=100, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('payload_template', models.JSONField(help_text='Template for the webhook payload')),
                ('headers_template', models.JSONField(default=dict, help_text='Additional headers to include')),
                ('is_active', models.BooleanField(default=True)),
                ('version', models.CharField(default='1.0', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'api_webhook_templates',
                'ordering': ['event_type'],
            },
        ),
        migrations.CreateModel(
            name='WebhookSignature',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('method', models.CharField(choices=[('hmac_sha256', 'HMAC SHA256'), ('hmac_sha512', 'HMAC SHA512'), ('jwt', 'JSON Web Token')], default='hmac_sha256', max_length=20)),
                ('secret_key', models.CharField(max_length=512)),
                ('algorithm', models.CharField(blank=True, default='HS256', max_length=10)),
                ('issuer', models.CharField(blank=True, max_length=255)),
                ('audience', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('webhook_endpoint', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='signature', to='api.webhookendpoint')),
            ],
            options={
                'db_table': 'api_webhook_signatures',
            },
        ),
        migrations.CreateModel(
            name='WebhookDelivery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed'), ('timeout', 'Timeout'), ('error', 'Error')], default='pending', max_length=20)),
                ('http_status_code', models.PositiveIntegerField(blank=True, null=True)),
                ('response_body', models.TextField(blank=True)),
                ('error_message', models.TextField(blank=True)),
                ('request_headers', models.JSONField(default=dict)),
                ('request_body', models.JSONField(default=dict)),
                ('attempted_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('response_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('attempt_number', models.PositiveIntegerField(default=1)),
                ('is_retry', models.BooleanField(default=False)),
                ('webhook_endpoint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='api.webhookendpoint')),
                ('webhook_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deliveries', to='api.webhookevent')),
            ],
            options={
                'db_table': 'api_webhook_deliveries',
                'ordering': ['-attempted_at'],
            },
        ),
        migrations.CreateModel(
            name='SystemHealth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_type', models.CharField(choices=[('database', 'Database'), ('cache', 'Cache'), ('external_api', 'External API'), ('webhook_delivery', 'Webhook Delivery'), ('email_service', 'Email Service'), ('bitcoin_service', 'Bitcoin Service')], max_length=50)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('critical', 'Critical'), ('down', 'Down')], max_length=20)),
                ('response_time_ms', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'api_system_health',
                'indexes': [models.Index(fields=['service_type', 'timestamp'], name='api_system__service_5e7b64_idx'), models.Index(fields=['status', 'timestamp'], name='api_system__status_c0d1aa_idx')],
            },
        ),
        migrations.CreateModel(
            name='PerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_type', models.CharField(choices=[('api_response_time', 'API Response Time'), ('database_query_time', 'Database Query Time'), ('webhook_delivery_time', 'Webhook Delivery Time'), ('user_login_time', 'User Login Time'), ('transaction_processing_time', 'Transaction Processing Time')], max_length=50)),
                ('endpoint', models.CharField(blank=True, max_length=200, null=True)),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('http_method', models.CharField(blank=True, max_length=10, null=True)),
                ('status_code', models.IntegerField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'api_performance_metrics',
            },
        ),
        migrations.CreateModel(
            name='Alert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('current_value', models.FloatField()),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.alertrule')),
            ],
            options={
                'db_table': 'api_alerts',
            },
        ),
        migrations.CreateModel(
            name='WebhookLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('level', models.CharField(choices=[('info', 'Info'), ('warning', 'Warning'), ('error', 'Error'), ('debug', 'Debug')], default='info', max_length=10)),
                ('message', models.TextField()),
                ('details', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('webhook_delivery', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.webhookdelivery')),
                ('webhook_endpoint', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.webhookendpoint')),
                ('webhook_event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.webhookevent')),
            ],
            options={
                'db_table': 'api_webhook_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['level', 'created_at'], name='api_webhook_level_56ac69_idx'), models.Index(fields=['webhook_endpoint', 'created_at'], name='api_webhook_webhook_f3793f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['event_type', 'status'], name='api_webhook_event_t_3b7c82_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['user', 'created_at'], name='api_webhook_user_id_a769ce_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['next_retry_at'], name='api_webhook_next_re_08a003_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookdelivery',
            index=models.Index(fields=['webhook_endpoint', 'status'], name='api_webhook_webhook_c00d26_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookdelivery',
            index=models.Index(fields=['webhook_event', 'attempt_number'], name='api_webhook_webhook_b71615_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookdelivery',
            index=models.Index(fields=['attempted_at'], name='api_webhook_attempt_ef5213_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['metric_type', 'timestamp'], name='api_perform_metric__de89e0_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['endpoint', 'timestamp'], name='api_perform_endpoin_746622_idx'),
        ),
        migrations.AddIndex(
            model_name='performancemetric',
            index=models.Index(fields=['timestamp'], name='api_perform_timesta_88917d_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['rule', 'created_at'], name='api_alerts_rule_id_ee2fe7_idx'),
        ),
        migrations.AddIndex(
            model_name='alert',
            index=models.Index(fields=['is_resolved', 'created_at'], name='api_alerts_is_reso_731579_idx'),
        ),
    ]
